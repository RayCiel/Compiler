int Wallace = 1<<10;
class sometimes {
    int naive;
    string haha;
}
class ArrayWrapper {
    sometimes[][] arr;
}
int get(int n) {
    if (n == 0) return 0;
    return 1 + get(n-1);
}
int main() {
    sometimes keep = new sometimes;
    int n = 3;
    keep.naive = 2 + get(n) * 4 / 5;
    bool fun = (keep.naive - 5 * 3) != (666 ^ 7);
    while (getInt() < Wallace) {
        keep.naive++;
        ++n;
    }
    return 0;
}
/*int main()
{
	int[][] array = new int[3][3];
	array[0] = null;
	println(toString(array[0].size()));
	array[0] = new int[10];
    int i;
	for(i = 0; i < 10; ++i)
		array[0][i] = i * i; //
	println(toString(array[0][9]));
	while(true)
	{
		break;
		continue;
	}

	return 0;
}*//*
class A {
    int a;
}
int main() {
	int x = 1;
	{
	    //string x = "gzotpa";
	    //{
	        //bool x = true;
	        {
                A x = null;
	        }
	        //if (x) print("gzotpa");
	    //}
	    //int y = x.length();
	}
	x = x + 1;
	return x;
}*/
/*class A{int a;}
A foo(){
   return new A();
}
int main(){
  foo().a=1;
  return 0;
}*/
/*class A{
A a;
void f(A t)
{this=t;}
}
int main(){
  return 0;
}*/

/*int main()
{
	int a = 1;
	string b;
	b = toString(a);
	return 0;
}*/

/*bool a;
bool b;
class A {
    int a;
    int b;
    A () {

        a = 1;
        b = a + 1;
        this.a = b;
        this.b = this.a + 1;
        {
            string a = toString(this.b);
            string b = a;
        }
    }
}
int main() {
    A a = new A();
	println("too young too simple.");
	return 0;
}*/
/*int main() {
	A tmp;
    return tmp.a.b.s.substring(0,1).length();
}
class A{
	B a;
}
class B{
	C b;
}
class C{
	string s;
}*/


